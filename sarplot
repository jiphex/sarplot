#!/bin/bash

## sarplot.sh
## Hereward Cooper - 14/10/2009
## A hack to plot various system resource information from sar using gnuplot

# Begin new option parsing code...
usage="Usage: $0 [-m METRIC] [-d DAY]"
metric=""
sadate=""
while getopts ":m:d:" options; do
  case $options in
    m ) metric=$OPTARG;;
 d ) sadate=$OPTARG
     if [ -d /var/log/sa ]; then
      safile="/var/log/sa/sa$sadate"
     else
      if [ -d /var/log/sysstat ]; then
       safile="/var/log/sysstat/sa$sadate"
   fi
  fi;;
 : ) echo "Missing parameter to option: -$OPTARG"
     echo $usage
  exit 1;;
    \? ) echo $usage
         exit 1;;
    * ) echo $usage
          exit 1;;
  esac
done
if [ "xxx${metric}yyy" == "xxxyyy" ]; then
    metric="cpu"
fi

## Start off doing some checks for required programs
if [ ! -f /usr/bin/gnuplot ]
then
        echo "CRITICAL: gnuplot missing!"
        exit 1;
fi

if [ ! -f /usr/bin/sadf ]
then
        echo "CRITICAL: sar missing!"
        exit 1;
fi


#####################################################
## Next Define some of the graphs you want to plot ##
## metric = the flag to pass sar                   ##
## field = the coloumn in the output to plot       ##
## title = human readable version of the field     ##
#####################################################

# Swap Usage
if [[ $metric == "swap" ]]
then
        sar -r | grep swpused || echo "No Swap Detected"; exit 1
        metric="-r"
        field="kbbuffers"
        title="% Swap Usage"

# 1 Minute Load Average
elif [[ $metric == "load" ]]
then
        metric="-q"
        field="ldavg-1"
        title="1 Minute Load Average"

# Disk Read IO
elif [[ $metric == "io" ]]
then
        metric="-b"
        field="rtps"
        title="Read Requests per Second"

# Disk Write IO
elif [[ $metric == "iow" ]]
then
        metric="-b"
        field="wtps"
        title="Write Requests per Second"

# Network Inbound
elif [[ $metric == "netin" ]]
then
        metric="-n DEV "
        field="eth0.*rxbyt"
        title="kB/s Recieved on eth0"

elif [[ $metric == "ctx" ]]
then
        metric="-w"
        field="cswch"
        title="Context switches/second"

elif [[ $metric == "iowait" ]]
then
 metric="-u"
 field="iowait"
 title="Context switches/second"


# Failback to CPU %idle if nothing defined
elif [[ $metric == "cpu" || $# -eq 0 ]]
then
        metric="-u"
        field="%idle"
        title="CPU %Idle"
else
        echo "Invalid metric specified!"
        exit 1
fi

#####################################
## This is where the magic happens ##
#####################################

TMPFILE=`mktemp /tmp/sarplot.XXXXXXXXXX`

/usr/bin/sadf $safile -- $metric | awk "/$field/ {print \$3,\$6}" > $TMPFILE
echo "set terminal dumb;
set title '$title';
set xdata time;
set timefmt '%s';
set xlabel 'Time';
plot '$TMPFILE' using 1:2 with lines title '$title';" | gnuplot
rm -f $TMPFILE